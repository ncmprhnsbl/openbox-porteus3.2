#!/bin/sh

## Launcher for various Porteus GTK apps and settings
## Requires /usr/lib/librokenman
## Author: brokenman <brokenman@porteus.org>

## Switch to root
#exec >/dev/null 2>/dev/null

PSCSCRIPT="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
TMP=/tmp/.gtkpns.tmp
if [ `whoami` != "root" ]; then
    echo $HOME > $TMP
    /opt/porteus-scripts/xorg/psu "$PSCSCRIPT" || sleep 1
    exit
	else
    [ ! -f $TMP ] && echo $HOME > $TMP
fi
pth=`<$TMP`
rm $TMP

## Get user with no root
export GUEST=`awk -F: '/1000:100/{print$1}' /etc/passwd | head -n1`

## Variables
export PIXMAPS=/usr/share/pixmaps/porteus
export PIDLOCK=/tmp/.psclock
export LAUNCHER=/opt/porteus-scripts/xorg/psu
export PSC_TMP=/tmp/psc$$
export PSC_SETTINGS=$PSC_TMP/psc-settings
PSCSCRIPT="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
TODAY=`date +%d-%b-%y`
MLMI=/mnt/live/memory/images
export PSCDUMP=$PSC_TMP/dump

. /usr/lib/librokenman

## Create the pid lock file so only one psc can run
## This file will also hold the notebook pages. (0 is page 1)
echo 0 > $PIDLOCK

## Initial setup
rm -rf /tmp/psc*
mkdir -p $PSC_TMP/psc-settings
echo "VERSION: `cat /etc/porteus-version` | KERNEL: `uname -r`" > $PSC_TMP/statusbar.txt

## Check for changes 
[[ `grep -o "changes=" /proc/cmdline` ]] && using_changes=1

## Functions start here
cleanup(){
rm -rf $PSC_TMP
}; export -f cleanup

btnNoTxt(){
if [ "$#" -eq 3 ]; then
echo '<button tooltip-text="'$1'"><input file>"'$PIXMAPS/$2'"</input><width>'$3'</width>'
	else
if [ "$#" -eq 4 ]; then
echo '<button tooltip-text="'$1'"><input file '$2'="'$3'"></input><width>'$4'</width>'
fi fi
}

gotopage(){
echo '<action>echo '$1' > $PIDLOCK</action><action>refresh:nbkMain</action>'
}

get_stamp(){
ls -lu --time-style='+%s' $1|awk '{print$6}'
}

check_app(){
## I want to be sure that type does not return true in the case of an alias
## in bash or something.
if ! application="$(type -p "$1")" || [ -z "$application" ]; then
  return 1
fi	
}

if [ -e /opt/porteus-scripts/xorg/browser ]; then
	export BROWSER=/opt/porteus-scripts/xorg/browser
else
	for a in swiftfox midori iceweasel google-chrome-stable opera firefox; do
	if check_app $a ;then
		export BROWSER=${a}
		break
	fi
	done
fi

## See if we can find the porteus folder
PF=`grep -A1 "Porteus data found in:" /var/log/porteus-livedbg|tail -n1|sed 's@//@/@g'`
export MODULES=${PF}/modules

if [ $PF ]; then
	export PFOLDER=${PF}
	export ROOTFOLDER=${MODULES%/*/*}
	if [ `find $ROOTFOLDER -type d -maxdepth 1 -name boot` ]; then
		export BOOTFOLDER=${ROOTFOLDER}/boot
		export CHEATCODES=$BOOTFOLDER/docs/cheatcodes.txt
			else
		NOBOOTFOLDER=1
	fi
		else
	NOMODULES=1
fi

edit_cfg(){
## If file system is xfs or reiser then advise to edit lilo.conf instead
ISLILO=`df -T $BOOTFOLDER|tail -n1|grep -o "xfs|reiserfs"`

if [ "$ISLILO" ]; then
  gtk_message "It appears you are using an xfs or reiser file system. The file /boot/syslinux/lilo.conf must be updated instead of porteus.cfg and
installation must be repeated as lilo must reload its config." 500 gtk-dialog-warning
LCFG=$BOOTFOLDER/syslinux/lilo.conf
kwrite $LCFG||kate $LCFG||leafpad $LCFG||beaver $LCFG||mousepad $LCFG||tea $LCFG||vi $LCFG
gtk_message "DO NOT forget to repeat installation of lilo so config file is reloaded." 500 gtk-dialog-warning
exit
fi

pcfg=$BOOTFOLDER/syslinux/porteus.cfg
[ ! -f $pcfg ] && { gtk_message "porteus.cfg was not found in the standard location. you will need to manually open this file." 450 gtk-dialog-warning; exit; }
[ -w $BOOTFOLDER ] && bwritable=1 || unset bwritable
if [ $bwritable ]; then
  kwrite $pcfg || leafpad $pcfg || beaver $pcfg || mousepad $pcfg || kate $pcfg || tea $pcfg
    else # boot folder is not writable
  gtk_message "It appears you are working from non writable media. This file can only be edited when using writable media." 500 gtk-dialog-warning
fi
}; export -f edit_cfg

cheat_info(){
CC=${CHEATCODES}
kwrite $CC || kate $CC || leafpad $CC || beaver $CC || mousepad $CC || tea $CC || vi $CC
}; export -f cheat_info

toggle_firewall(){
firewall_is_on=$(grep -o LOG_DROP <<<`/etc/rc.d/rc.FireWall status`)
if [[ $firewall_is_on ]]; then
	/etc/rc.d/rc.FireWall stop
	echo "FIREWALL STATUS: OFF" > $PSC_TMP/fw.tmp
		else
	/etc/rc.d/rc.FireWall start
	echo "FIREWALL STATUS: ON" > $PSC_TMP/fw.tmp
fi
cp -a --parents /etc/rc.d/rc.FireWall $PSC_SETTINGS
}; export -f toggle_firewall

strict_firewall(){
/etc/rc.d/rc.FireWall stop
ALLOWEDP=`grep "ALLOWED_PORTS=" /etc/rc.d/rc.FireWall`
STRICTP="ALLOWED_PORTS=\"21 80 110 143 443\""
sed -i "s/$ALLOWEDP/$STRICTP/g" /etc/rc.d/rc.FireWall
/etc/rc.d/rc.FireWall start
echo "FIREWALL STATUS: ON  |  MODE: STRICT" > $PSC_TMP/fw.tmp
cp -a --parents /etc/rc.d/rc.FireWall $PSC_SETTINGS
}; export -f strict_firewall

normal_firewall(){
/etc/rc.d/rc.FireWall stop
ALLOWEDP=`grep "ALLOWED_PORTS=" /etc/rc.d/rc.FireWall`
NORMALP="ALLOWED_PORTS=\"20 21 22 25 80 110 143 443\""
sed -i "s/$ALLOWEDP/$NORMALP/g" /etc/rc.d/rc.FireWall
/etc/rc.d/rc.FireWall start
echo "FIREWALL STATUS: ON  |  MODE: NORMAL" > $PSC_TMP/fw.tmp
cp -a --parents /etc/rc.d/rc.FireWall $PSC_SETTINGS
}; export -f normal_firewall

blockall_firewall(){
/etc/rc.d/rc.FireWall stop
ALLOWEDP=`grep "ALLOWED_PORTS=" /etc/rc.d/rc.FireWall`
STRICTP="ALLOWED_PORTS=\"80 443\""
iptables -F
iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP
sed -i "s/$ALLOWEDP/$STRICTP/g" /etc/rc.d/rc.FireWall
/etc/rc.d/rc.FireWall start
echo "FIREWALL STATUS: ON  |  MODE: BLOCKALL" > $PSC_TMP/fw.tmp
cp -a --parents /etc/rc.d/rc.FireWall $PSC_SETTINGS
}; export -f blockall_firewall

gtk_yesno(){
w=${1}
let width=$(( w-60 ))
echo '
'`start_window "Choose yes or no" cdr $1`'
	<hbox>
		'`pixmapfile $2 $2 $3`'
	<frame>
		'`txtmarkup $width "$4"`'
		'`txtmarkup $width ""`'
	</frame>
	</hbox>
		'`txtmarkup $width "$5"`'
	<hbox>
		<button yes></button><button no></button>
	</hbox>
'`end_window`'
'|gtkdialog -s > $PSC_TMP/yesno.tmp
if [ `grep -o abort $PSC_TMP/yesno.tmp` ]; then
	answ=no
	elif [ `grep -o No $PSC_TMP/yesno.tmp` ]; then
		answ=no
	else
		answ=yes
fi
rm $PSC_TMP/yesno.tmp
}; export -f gtk_yesno

info_firewall(){
/etc/rc.d/rc.FireWall status > $PSC_TMP/info
leafpad $PSC_TMP/info || beaver $PSC_TMP/info || kwrite $PSC_TMP/info || mousepad $PSC_TMP/info
}; export -f info_firewall

firewall_manager(){
. /usr/lib/librokenman

## Create sysvinit script for firewall
if [ ! -f /etc/rc.d/rc4.d/S-firewall.sh ]; then
cat > /etc/rc.d/rc4.d/S-firewall.sh << EOD
#!/bin/bash
#
# Switch on firewall during boot
# This script is controlled by Porteus Settings Centre
# It toggles executable bit to enable/disable during boot
# This V init script is called by /etc/rc.d/rc.sysvinit

/etc/rc.d/rc.FireWall start
EOD
fi

## Check if firewall is activated
[ ! -x /etc/rc.d/rc.FireWall ] && chmod +x /etc/rc.d/rc.FireWall
firewall_is_on=$(grep -o LOG_DROP <<<`/etc/rc.d/rc.FireWall status`)

## Check firewall mode
FIREWALLMODE=`grep ALLOWED_PORTS= /etc/rc.d/rc.FireWall|wc -w`
if [ $FIREWALLMODE ]; then
	[ $FIREWALLMODE -eq 8 ] && FMODE=NORMAL
	[ $FIREWALLMODE -eq 5 ] && FMODE=STRICT
	[ $FIREWALLMODE -eq 2 ] && FMODE=BLOCKALL
		else
	FMODE=""
fi

## Display firewall status
if [[ $firewall_is_on ]]; then
	echo "FIREWALL: ON  |  MODE: $FMODE" > $PSC_TMP/fw.tmp
		else
	echo "FIREWALL: OFF" > $PSC_TMP/fw.tmp
fi

## Check if firewall is started during boot
[ -x /etc/rc.d/rc4.d/S-firewall.sh ] && export FWALL=true || export FWALL=false

export PFIREWALL='
'`start_window "Firewall manager" '$PIXMAPS'/firewall.png 520 350`'
	<hbox>
		'`pixmapfile 48 48 $PIXMAPS/firewall.png`'
		'`txtcolor 420 darkred x-large bold "  Porteus firewall manager"`'
	</hbox>
	<frame>
		'`txtmarkup 500 "Use the options below to toggle your firewall on/off and set the desired security levels. These actions take place in real time. Setting the firewall to activate during boot will take place the next time you boot Porteus."`'
	</frame>
	'`chkbox $FWALL chkFirewall "Activate firewall when Porteus starts"`'
		<action>if true chmod +x /etc/rc.d/rc4.d/S-firewall.sh</action>
		<action>if false chmod -x /etc/rc.d/rc4.d/S-firewall.sh</action>
		<action>if true cp -a --parents /etc/rc.d/rc4.d/S-firewall.sh $PSC_SETTINGS</action>
		<action>if false cp -a --parents /etc/rc.d/rc4.d/S-firewall.sh $PSC_SETTINGS</action></checkbox>
	<hbox>
		<button use-underline="true" tooltip-text="Preview the current firewall rules and status">
			<label>_Information</label><input file stock="gtk-help"></input>
			<action type="function">info_firewall</action>
		</button>
		<button use-underline="true" tooltip-text="Block all traffic except for port 80 and 443 for web browsing">
			<label>_Blockall</label><input file stock="gtk-delete"></input>
			<action type="function">blockall_firewall</action>
			<action>Refresh:stbfw</action>
		</button>
		<button use-underline="true" tooltip-text="Activate a strict firewall with tcp/udp traffic allowed and open ports 21 80 110 143 443 only.">
			<label>_Strict</label><input file stock="gtk-dialog-error"></input>
			<action type="function">strict_firewall</action>
			<action>Refresh:stbfw</action>
		</button>
		<button use-underline="true" tooltip-text="Activate a normal firewall with all tcp/udp packets accepted and open ports 20 21 22 25 80 110 143 443.">
			<label>_Normal</label><input file stock="gtk-add"></input>
			<action type="function">normal_firewall</action>
			<action>Refresh:stbfw</action>
		</button>
		<button use-underline="true" tooltip-text="Toggle the firewall on and off" has-focus="true">
			<label>_Toggle firewall</label><input file stock="gtk-refresh"></input>
			<action type="function">toggle_firewall</action>
			<action>Refresh:stbfw</action>
		</button>
	</hbox>
	<hbox>
		'`butok`'
	</hbox>
	<statusbar has-resize-grip="false">
		<variable>stbfw</variable>
		<input file>'$PSC_TMP'/fw.tmp</input>
		<sensitive>true</sensitive>
	</statusbar>
</vbox>
</window>
'
gtkdialog -p PFIREWALL
rm $PSC_TMP/fw.tmp
}; export -f firewall_manager

get_password(){
secret=$PSC_TMP/.password
export GET_PASSWORD='
'`start_window "Enter a password" gtk-dialog-authentication 450`'
	<hbox>
	'`pixmapfile 48 48 $PIXMAPS/encrypt.png`'
	'`txtmarkup 380 "Please provide a password which will be used for encryption/decryption of your file/folder."`'
	</hbox>
	<frame>
		<hbox>
			<text width-request="90"><label>Password:</label></text>
			<entry visibility="false" invisible-char="120" tooltip-text="visibility, invisible-char">
				<default>""</default>
				<variable>pw</variable>
				<action signal="changed">enable:pw2</action>
			</entry>
		</hbox>
		<hbox>
			<text width-request="90"><label>Repeat:</label></text>
			<entry visibility="false" invisible-char="120" tooltip-text="visibility, invisible-char" sensitive="false">
				<default>""</default>
				<variable>pw2</variable>
			</entry>
		</hbox>
	</frame>
	<hbox>
		<button cancel></button>
		<button ok></button>
	</hbox>
'`end_window`'
'
gtkdialog -p GET_PASSWORD > $secret
[ `egrep -o "Cancel|abort" $secret` ] && { rm $secret; exit; }

## Make sure the passwords matched
sed -i 's@"@@g' $secret
p1=`grep "pw=" $secret|awk -F= '{print$NF}'`
p2=`grep "pw2=" $secret|awk -F= '{print$NF}'`
rm $secret
if [ "$p1" != "$p2" ]; then
	gtk_message "PASSWORDS DO NOT MATCH!!!" 450 gtk-dialog-warning
	unset p1 p2
	$FUNCNAME
	return
fi

## Make sure password is not blank
if [ -z "$p1" -o -z "$p2" ]; then
	gtk_message "BLANK PASSWORDS NOT ALLOWED!!!" 450 gtk-dialog-warning
	unset p1 p2
	$FUNCNAME
	return
fi
echo $p2 |base64 > $PSC_TMP/.pass
chmod 600 $PSC_TMP/.pass
unset p1 p2
}; export -f get_password

encrypt_file(){
. /usr/lib/librokenman
export ENCRYPT_FILE='
'`start_window "Encrypt file/folder" cdr 450 320`'
	<hbox>
	'`pixmapfile 48 48 $PIXMAPS/encrypt.png`'
	'`txtcolor 380 darkred large bold "  Select a file/folder for encryption"`'
	</hbox>
	<frame>
		'`txtmarkup 410 "Your chosen file/folder will be encrypted and the original then removed from the system. If a folder is chosen it will be converted into a single encrypted file which will need to be decrypted using this application. <b>DO NOT</b> forget your password or you will lose you data!"`'
	</frame>
	<hbox>
		'`txtmarkup 60 "<b>Folder:</b>"`'
		<entry editable="false" fs-title="Select an existing folder" fs-action="folder" fs-folder="/mnt" height-request="32">
			<variable>EDIR</variable>
		</entry>
		<button>
			<input file stock="gtk-directory"></input>
			<action>fileselect:EDIR</action>
		</button>
	</hbox>
	<hbox>
		'`txtmarkup 60 "<b>File:</b>"`'
		<entry editable="false" fs-title="Select an existing file" fs-action="file" fs-folder="/mnt" height-request="32">
			<variable>EFILE</variable>
		</entry>
		<button>
			<input file stock="gtk-file"></input>
			<action>fileselect:EFILE</action>
		</button>
	</hbox>
	'`hsep`'
	<hbox>
		'`butcancel`'
		'`butok`'
	</hbox>
'`end_window`'
'
gtkdialog -p ENCRYPT_FILE > $PSCDUMP
[ `egrep -o "Cancel|abort" $PSCDUMP` ] && exit

EDIR=`grep EDIR $PSCDUMP|cut -d'"' -f2`
EFILE=`grep EFILE $PSCDUMP|cut -d'"' -f2`

if [ -z "$EDIR" -a -z "$EFILE" ]; then
	gtk_message "You must select a file or folder!" 400 gtk-dialog-warning
	$FUNCNAME
	return
fi

[ "$EDIR" ] && ENCTARG=${EDIR}
[ "$EFILE" ] && ENCTARG=${EFILE}

## Make sure path is writable
EPATH=${ENCTARG%/*}
is_writable $EPATH
if [ $answ -ne 0 ]; then
	unset answ
	gtk_message "This path is not writable!" 400 gtk-dialog-warning
	unset EDIR EFILE ENCTARG
	$FUNCNAME
	return
fi

get_password

## If it is a file then encrypt directly else tar and encrypt.
if [ "$EFILE" ]; then
	unset EDIR
	EPATH=${EFILE%/*}
	base64 -d $PSC_TMP/.pass|openssl aes-256-cbc -e -salt -in $ENCTARG -out ${ENCTARG}.enc -pass stdin
fi
if [ "$EDIR" ]; then
	EPATH=${EDIR%/*}
	EDIRNAME=${EDIR##*/}
	cd $EPATH
	tar -czpf $EDIRNAME.tar.gz $EDIRNAME
	base64 -d $PSC_TMP/.pass|openssl aes-256-cbc -e -salt -in $EPATH/$EDIRNAME.tar.gz -out $EPATH/${EDIRNAME}.dir.enc -pass stdin
	rm $EDIRNAME.tar.gz
	cd -
fi

rm $PSC_TMP/.pass
## Ask if user will remove original file/folder
gtk_yesno 500 48 $PIXMAPS/security.png "Your file has been encrypted and is now in the original folder." "<b>Would you like to remove the original source now?</b>"
if [ "$answ" == "yes" ]; then
	rm -rf $EFILE $EDIR
	unset answ
fi
}; export -f encrypt_file

decrypt_file(){
. /usr/lib/librokenman
export DECRYPT_FILE='
'`start_window "Decrypt file/folder" cdr 450 320`'
	<hbox>
	'`pixmapfile 48 48 $PIXMAPS/encrypt.png`'
	'`txtcolor 380 darkred large bold "  Select a file/folder to decrypt"`'
	</hbox>
	<frame>
		'`txtmarkup 410 "The file that you choose will be decrypted and then the encrypted version will then removed from the system."`'
	</frame>

	<hbox>
		'`txtmarkup 60 "<b>File:</b>"`'
		<entry editable="false" fs-title="Select an existing file" fs-action="file" fs-folder="/mnt" height-request="32">
			<variable>DEFILE</variable>
		</entry>
		<button>
			<input file stock="gtk-file"></input>
			<action>fileselect:DEFILE</action>
		</button>
	</hbox>
	'`hsep`'
	<hbox>
		'`butcancel`'
		'`butok`'
	</hbox>
'`end_window`'
'
gtkdialog -p DECRYPT_FILE > $PSCDUMP
[ `egrep -o "Cancel|abort" $PSCDUMP` ] && exit

DEFILE=`grep DEFILE $PSCDUMP|cut -d'"' -f2`

if [ -z "$DEFILE" ]; then
	gtk_message "You must select a file!" 300 gtk-dialog-warning
	$FUNCNAME
	return
fi

[ "$DEFILE" ] && DENCTARG=`echo $DEFILE|sed -e 's/.enc//g' -e 's/.dir//g'`

## Make sure path is writable
DEPATH=${DENCTARG%/*}
is_writable $DEPATH
if [ $answ -ne 0 ]; then
	unset answ
	gtk_message "This path is not writable!" 400 gtk-dialog-warning
	unset DEDIR DEFILE DENCTARG
	$FUNCNAME
	return
fi

get_password

## If it is a file then decrypt directly else decrypt and unpack.
if [ "$DEFILE" ]; then
	DEPATH=${DEFILE%/*}
	cd $DEPATH
	[ `grep -o .dir.enc <<<$DEFILE` ] && folder=1 && DENCTARG=$DENCTARG.tar.gz
	base64 -d $PSC_TMP/.pass|openssl aes-256-cbc -d -in $DEFILE -out $DENCTARG -pass stdin || bad_password
	[ $folder ] && tar zxvf $DENCTARG && rm $DENCTARG
	rm $DEFILE
	gtk_message "Your file has been decrypted and is now in the same path as the source." 451 gtk-yes
	rm $PSC_TMP/*.tmp
	cd -
fi

}; export -f decrypt_file

bad_password(){
gtk_message "Your password was incorrect or an error occured!" 450 gtk-dialog-warning
rm $PSC_TMP/*.tmp
rm $DENCTARG
exit
}; export -f bad_password

change_password(){
. /usr/lib/librokenman
## Select which user to change password for
echo "none" > $PSC_TMP/users.tmp
echo root >> $PSC_TMP/users.tmp
awk -F: '$6 ~ /\/home/ && $3 >= 500 {print $1}' /etc/passwd >> $PSC_TMP/users.tmp

## Send default user to text file
echo none > $PSC_TMP/user-change.tmp
export CHANGE_PASSWD='
'`start_window "Change password" /usr/share/pixmaps/porteus/security.png 450 200`'
	<hbox>
	'`pixmapicon 48 48 kuser`'
	'`txtcolor 360 darkred large bold "Select user for password change"`'
	</hbox>
	<frame Change password>
	<hbox>
	'`txtmarkup 0 "Select a user to change the password for:"`'
		<comboboxtext>
			<variable>cboUsers</variable>
			<sensitive>enabled</sensitive>
			'"$(for a in `cat $PSC_TMP/users.tmp`; do echo "<item>$a</item>"; done)"'
			<action signal="changed">echo $cboUsers > $PSC_TMP/user-change.tmp</action>
		</comboboxtext>
	</hbox>
	</frame>
	<hbox>
		'`butcancel`'
		'`butok`'
	</hbox>
'`end_window`'
'
gtkdialog -p CHANGE_PASSWD > $PSCDUMP
[ `egrep -o "Cancel|abort" $PSCDUMP` ] && { rm $PSC_TMP/*.tmp; exit; }

## Make sure something was chosen
[[ `grep -o none $PSC_TMP/user-change.tmp` ]] && { $FUNCNAME; return; }
CHOSENUSER=`<$PSC_TMP/user-change.tmp`
p1=`grep $CHOSENUSER /etc/shadow | awk -F: '{print$2}'|awk '{print substr($0,9)}'`
xterm -e "passwd $CHOSENUSER"
p2=`grep $CHOSENUSER /etc/shadow | awk -F: '{print$2}'|awk '{print substr($0,9)}'`
rm $PSC_TMP/*.tmp
if [ "$p1" != "$p2" ]; then
  cp -a --parents /etc/shadow $PSC_SETTINGS && gtk_message "The password for $CHOSENUSER was changed!" 450 gtk-yes
    else
  gtk_message "No changes were made to your password." 400 gtk-dialog-warning
fi 
}; export -f change_password

startup_script(){
. /usr/lib/librokenman
touch $PSC_TMP/script.tmp
scriptout=$PSC_TMP/script-output.tmp
export START_SCRIPT='
'`start_window "Startup scripts" file 500 350`'
<hbox>
  '`pixmapfile 48 48 $PIXMAPS/boot.png`'
  '`txtcolor 420 darkred large bold "Run a script automtically when Porteus boots"`'
</hbox>
'`hsep`'
'`txtmarkup 500 "Enter in commands <i>(one per line)</i> or choose a script below."`'
<edit editable="true" wrap-mode="1" left-margin="10">
  <variable>commands</variable>
  <input file>'$PSC_TMP'/script.tmp</input>
</edit>
<hbox>
  '`txtmarkup 60 "<b>Script:</b>"`'
  <entry editable="false" fs-title="Select an existing script" fs-action="file" fs-folder="/mnt" height-request="32">
    <variable>ESCRIPT</variable>
  </entry>
  <button>
    <input file stock="gtk-file"></input>
    <action>fileselect:ESCRIPT</action>
  </button>
</hbox>
<hbox>
  '`butok`'
  '`butcancel`'
</hbox>
'`end_window`'
'
gtkdialog -p START_SCRIPT > $scriptout

[ `egrep "Cancel|abort" $scriptout` ] && { cleanup; exit; }

## Check if user chose script or entered commands
chkcom=`grep commands $scriptout|cut -d'"' -f2`

if [ "$chkcom" ]; then
  sed -n '/commands/,/EXIT/p' $scriptout|sed -e '/EXIT/d' -e 's/commands="//g' -e 's/"//g' > /etc/rc.d/rc4.d/S-startup-script.sh
  sed -i '1i\#!/bin/bash' /etc/rc.d/rc4.d/S-startup-script.sh
  chmod +x /etc/rc.d/rc4.d/S-startup-script.sh
  cp -a --parents /etc/rc.d/rc4.d/S-startup-script.sh $PSC_SETTINGS
  gtk_message "Your commands were saved as /etc/rc.d/rc4.d/S-startup-script.sh and will be run at next boot" 400 gtk-yes &
    else
  SSCRIPT=`grep ESCRIPT $scriptout|cut -d '"' -f2`
  if [ ! `grep "#!/bin" $SSCRIPT` ]; then
    gtk_message "No interpreter was found as the first line in your script!" 500 gtk-dialog-warning
    exit
  fi
  cp $SSCRIPT /etc/rc.d/rc4.d/S-startup-script.sh
  chmod +x /etc/rc.d/rc4.d/S-startup-script.sh
  cp -a --parents /etc/rc.d/rc4.d/S-startup-script.sh $PSC_SETTINGS
  gtk_message "Your script was saved as /etc/rc.d/rc4.d/S-startup-script.sh and will be run at next boot." 400 gtk-yes &
  exit
fi

}; export -f startup_script

call_psinfo(){
/opt/porteus-scripts/psinfo
}; export -f call_psinfo

home_page(){
export PSC_HOME='
<window window_position="1" title="Porteus Settings Centre" height-request="500" width-request="550" icon-name="cdr" allow-shrink="false">
<vbox margin="3">
	<hbox spacing="10">
		'`btnNoTxt "Show the home screen" home.png 32`'
			'`gotopage 0`'
		</button>
		'`btnNoTxt "Show the system screen" tools.png 32`'
			'`gotopage 1`'
		</button>
		'`btnNoTxt "Show the security screen" security.png 32`'
			'`gotopage 2`'
		</button>
		'`btnNoTxt "Show the boot screen" boot.png 32`'
			'`gotopage 3`'
		</button>
		'`btnNoTxt "Show the changes screen" save.png 32`'
			'`gotopage 4`'
		</button>
		<button image-position="0" tooltip-text="Open the system information screen"><input file icon="help-about"></input>
			<width>36</width>
			<action type="command">/opt/porteus-scripts/xpsinfo &</action>
		</button>
		'`btnNoTxt "Exit the application" icon application-exit 32`'
			<action type="exit">done</action>
		</button>
	</hbox>
	'`hsep`'
<notebook show-tabs="false" show-border="false" labels="General|System|Security|Boot|Changes|Info|Help" height-request="400">

<vbox>
	'`txtcolor 0 darkred large bold "General settings"`'
	<frame Porteus Updater>
	<hbox>
		'`btnNoTxt "Update Porteus now" sync-64.png 48`'
			<action type="command">/opt/porteus-scripts/gtk-update-porteus &</action></button>
		'`txtmarkup 450 "The update function will check for Porteus updates on the server that <b>do not</b> exist in your modules folder. You can choose the updates to download. They sould be left in the modules folder after downloading."`'
	</hbox>
	</frame>

	<frame Porteus Installer>
	<hbox>
		'`btnNoTxt "Install Porteus to media" icon drive-external-usb 48`'
			<action type="command">/opt/porteus-scripts/pinstaller &</action></button>
		'`txtmarkup 450 "The installer will assist with installing Porteus to a fixed or removable drive. You can prepare a partition using your partition manager."`'
	</hbox>
	</frame>

	<frame Porteus FAQ>
	<hbox>
		'`btnNoTxt "Porteus FAQ" icon dialog-question 48`'
			<action type="command">su -l $GUEST -c '$BROWSER' /usr/doc/Porteus-FAQ/index.html &</action></button>
		'`txtmarkup 450 "Read the frequently asked questions about Porteus. For more indepth information and tutorials about Porteus you can visit the Porteus website."`'
	</hbox>
	</frame>

	<frame Porteus Tutorials>
	<hbox>
		'`btnNoTxt "Visit the Porteus tutorials section" porteus128.png 48`'
		 <action type="command">su -l $GUEST -c '$BROWSER' "http://porteus.org/info/tutorials.html" &</action>
		 </button>
		'`txtmarkup 450 "The Porteus website contains many useful tutorials, walkthroughs and video presentations about the inner workings of Porteus. You may also join our forums."`'
	</hbox>
	</frame>
</vbox>


<vbox>
	'`txtcolor 0 darkred large bold "System settings"`'
	<frame Language setup>
	<hbox>
		'`btnNoTxt "Language setup and keyboard layout." language.png 48`'
			<action type="command">/opt/porteus-scripts/gtk-language-selection-start &</action></button>
		'`txtmarkup 450 "Choose and download your chosen language file packs from the official Porteus server. Porteus provides language support for most languages."`'
	</hbox>
	</frame>

	<frame Time config>
	<hbox>
		'`btnNoTxt "Adjust your system time" App-world-clock-icon.png 48`'
			<action type="command">/opt/porteus-scripts/gtk-porteus-timeconfig &</action></button>
		'`txtmarkup 450 "Set yout timezone and clock settings including UTC or local time. This is useful if you clock is showing the incorrect time."`'
	</hbox>
	</frame>

	<frame Keyboard settings>
	<hbox>
		'`btnNoTxt "Change your keyboard/mouse settings" keyboard.png 48`'
			<action>/opt/porteus-scripts/gtk-xkb-select &</action></button>
		'`txtmarkup 450 "Change the various settings related to your keyboard or mouse for your existing window manager and current session."`'
	</hbox>
	</frame>

	<frame Sound settings>
	<hbox>
		'`btnNoTxt "Sound card selector" audio-card.svg 48`'
			<action type="command">/opt/porteus-scripts/gtk-soundcard-select &</action></button>
		'`txtmarkup 450 "Choose which sound card you would like to use as your default if your system has more than one."`'
	</hbox>
	</frame>
</vbox>




<vbox>
	'`txtcolor 0 darkred large bold "Security settings"`'
	<frame Porteus firewall>
	<hbox>
		'`btnNoTxt "Manage your firewall" firewall.png 48`'
			<action type="function">firewall_manager &</action></button>
		'`txtmarkup 450 "Manage your firewall. Toggle the firewall on/off and set the desired protection level. You can also choose to activate the firewall the next time Porteus starts."`'
	</hbox>
	</frame>

	<frame Porteus password>
	<hbox>
		'`btnNoTxt "Change password" icon system-users 48`'
			<action type="function">change_password</action></button>
		'`txtmarkup 450 "Change your current user password."`'
	</hbox>
	</frame>

	<frame Encrypt a folder/file>
	<hbox>
		'`btnNoTxt "Encrypt a chosen file or folder" encrypt.png 48`'
			<action>encrypt_file &</action></button>
		'`txtmarkup 450 "Select a file or folder and encrypt it. To decrypt the chosen file/folder you should use this tool again."`'
	</hbox>
	</frame>

	<frame Decrypt a folder/file>
	<hbox>
		'`btnNoTxt "Decrypt a chosen file or folder" decrypt.png 48`'
			<action>decrypt_file &</action></button>
		'`txtmarkup 450 "Select a file or folder and decrypt it. To encrypt the chosen file/folder you should use this tool again."`'
	</hbox>
	</frame>
</vbox>

<vbox>

	'`txtcolor 0 darkred large bold "Boot options"`'
	<frame>
	  '`txtmarkup 500 "These options relate to the Porteus boot procedure. You can browse the Porteus cheatcodes and then edit your porteus.cfg file to add your chosen cheatcode. You may also choose to run a particular command or script automatically after you boot Porteus. You will need to be using the <b>changes=</b> cheatcode for this to work. The cheatcodes.txt file can be found in your boot/docs folder or by visiting our website."`'
	</frame>
	<frame Porteus cheatcodes>
	<hbox>
		'`btnNoTxt "Read the cheatcodes available." magic-folder-128.png 48`'
			<action type="function">cheat_info &</action></button>
		'`txtmarkup 450 "Read about the cheatcodes and decide which ones you want to use before entering the chosen cheats below."`'
	</hbox>
	</frame>

	<frame Startup scripts>
	<hbox>
		'`btnNoTxt "Run a script or command at startup" cmd.png 48`'
			<action type="command">startup_script &</action></button>
		'`txtmarkup 450 "Run a command or a script when Porteus starts up."`'
	</hbox>
	</frame>
</vbox>

<vbox>
	'`txtcolor 0 darkred large bold "Porteus changes"`'
	<frame Porteus Magic Folders>
	<hbox>
		'`btnNoTxt "Porteus magic folders" magic-folder-128.png 48`'
			<action type="command">/opt/porteus-scripts/magic-folders &</action></button>
		'`txtmarkup 450 "Porteus can monitor changes to a chosen folder/s and save to a file or folder on your system. Encrypted save files are supported."`'
	</hbox>
	</frame>

	<frame Porteus Save Changes>
	<hbox>
		'`btnNoTxt "Save Porteus changes" icon cdr 48`'
			<action type="command">/opt/porteus-scripts/make-changes &</action></button>
		'`txtmarkup 450 "Save all of your Porteus changes to a file on your system or removable device. Encrypted save files are supported."`'
	</hbox>
	</frame>

	<frame Porteus Save Session>
	<hbox>
		'`btnNoTxt "Save your current Porteus session" keyword-64.png 48`'
			<action type="command">/opt/porteus-scripts/save-session &</action></button>
		'`txtmarkup 450 "Save your current Porteus session to a module, file or folder. Useful for setting up Porteus how you like it."`'
	</hbox>
	</frame>

	<frame Edit porteus.cfg>
	<hbox>
		'`btnNoTxt "Edit your changes location in porteus.cfg" edit.png 48`'
			<action type="function">edit_cfg &</action></button>
		'`txtmarkup 450 "Edit the location of your changes file/folder in the file <b>porteus.cfg</b> for activation during your next boot."`'
	</hbox>
	</frame>
</vbox>

	<variable>nbkMain</variable>
	<input file>"'$PIDLOCK'"</input>
</notebook>
		<statusbar has-resize-grip="false">
			<variable>stb</variable>
			<input>cat '$PSC_TMP'/statusbar.txt</input>
			<sensitive>true</sensitive>
		</statusbar>
</vbox>
</window>
'
gtkdialog -p PSC_HOME
}

home_page

## Check if user has altered any files
zzz=`ls -1 $PSC_SETTINGS|wc -l`
[ $zzz -gt 0 ] && altered_files=1

if [ -z $using_changes -a $altered_files ]; then
    gtk_yesno 550 48 $PIXMAPS/stop-64.png "You are not currently saving your Porteus changes!" "Would you like to create a module containing your changes now?"

    if [ "$answ" == "yes" ]; then
        if [ -w $MODULES ]; then
        dir2xzm $PSC_SETTINGS $MODULES/psc-settings.xzm
        gtk_message "Your psc settings were saved to your modules folder and will be activated the next time you boot Porteus." 500 gtk-yes
            else # Modules folder NOT found
        dir2xzm $PSC_SETTINGS /tmp/psc-settings.xzm
        gtk_message "Modules folder was not found or is not writable! Your psc settings were saved to /tmp/psc-settings.xzm. Please move the module into your porteus/modules folder manually." 500 gtk-yes
        fi
    fi
fi
cleanup
exit
